[TurnKey v15.0/v15.1 GitLab appliance] How to update GitLab to v11.5
====================================================================

.. contents::

General info
============

Aims
----

The v15.0/v15.1 `TurnKey GitLab appliance`_ ships with GitLab_ v11.1. This
guide aims to explicitly show how to upgrade GitLab to v11.5 (the latest
stable as of writing). Hopefully it will include enough info to remain
relevant even once GitLab produces a newer version. But that will require you
to understand what is documented here and apply these steps to future
upgrade instructions. If/when this guide is out of date, and there is
something you need a hand with, please feel free to post in the forums_.

The likely exception will be when any of the dependencies need upgrading.
As noted below, the only one that needs upgrading at this point is Ruby.
However, in future it is likely that others may need upgrading.

Relevence to future TurnKey GitLab releases
-------------------------------------------

It's probably worth noting that the install process of GitLab v15.2 (which
ships with GitLab v11.5) has been slightly modified, so these instructions
won't apply exactly for updating v15.2.

The GitLab upgrade docs themselves will still be relevant. So a combination
of these notes plus the GitLab upgrade docs may be enough for the intrepid
TurnKey user. If not, then no shame, just ask on the forums_.

Use of the GitLab docs
----------------------

The `TurnKey GitLab appliance buildcode`_ installs `GitLab CE`_ from source
code, so the relevant GitLab `update docs`_ should apply. Some details
regarding dependencies are covered below and it's also worth noting that
TurnKey GitLab uses MySQL as a DB backend (technically MariaDB in v15.x).

It may be possible to just skip to the upgrade docs for the latest version.
However, due to changes between GitLab versions, it is advisable to go
through each version upgrade one-by-one. E.g. in this case, you'd go
from `11.1 to 11.2`_ then `11.2 to 11.3`_ and so on (until you get to
the latest version). However, I have read through the docs and have
skipped straight to the latest v11.5 release. 

Please note these docs have only been tested on a vanilla v15.1 TurnKey
GitLab appliance with no user data. Hopefully it should work flawlessly for
you, but it can't be guaranteed.

Getting ready
=============

Backup and/or "Test" server
---------------------------

**IMPORTANT** - Before you start, always ensure that you have a current
backup that you have tested (ideally by restoring to an alternate
server) and are sure is working.

It is recommended that you do not do this on a production server.
Instead work on a "test server" (ideally with all your data included)
and once you've confirmed the upgrade to have worked, then swap the test
server with your production server. Alternatively, "replay" the steps on
your production environment. Although again - always ensure you have a
working backup.

Obviously, if you just wish to upgrade GitLab before you start work,
then the above warning can be ignored.

Check current versions
----------------------

Before we start, it's a good idea to check what we're working with. We
can then compare versions installed against GitLab requirements. The
following steps show commands and expected output on v15.1.

Check GitLab version
--------------------

As noted above, GitLab should by default be v11.1.

.. code:: bash

    root@gitlab ~# head /home/git/gitlab/CHANGELOG.md 
    **Note:** This file is automatically generated. Please see the [developer
    documentation](doc/development/changelog.md) for instructions on adding your own
    entry.

    ## 11.1.0 (2018-07-22)

    ### Security (6 changes)

    - Fix XSS vulnerability for table of content generation.
      - Update sanitize gem to 4.6.5 to fix HTML injection vulnerability.


Check Ruby version
------------------

By default, the TurnKey applaince uses Ruby 2.3.3 installed from the
offical Debian repositories. We'll need to get rid of that because
GitLab >= v11.2 requires Ruby 2.4.x.

.. code:: bash

    root@gitlab ~# ruby -v
    ruby 2.3.3p222 (2016-11-21) [x86_64-linux-gnu]

    root@gitlab ~# apt policy ruby 2>/dev/null | grep Installed
      Installed: 1:2.3.3


Check Yarn version
------------------

Yarn is installed from a 3rd party apt repository, so on v15.1 should be
adequite for our purposes. If need be it can be updated via apt install.
A specific version can be installed via appending "=VERSION". E.g.
"yarn=1.12.3-1".

.. code:: bash

    root@gitlab ~# apt policy yarn 2>/dev/null | grep Installed
      Installed: 1.12.3-1

Check Go version
----------------

Go is installed direct from upstream source code.

.. code:: bash

    root@gitlab ~# go version
    go version go1.10.3 linux/amd64

Check NodeJS version
--------------------

NodeJS is installed via n (n is installed from source).

.. code:: bash

    root@gitlab ~# node -v
    v10.13.0

Doing the upgrade
=================

As mentioned above it's best to go through the upgrades version by
version. Having said that, I've gone through all the docs and other than
Ruby, we don't need to update any dependencies. So we'll skip notes on
upgrading other dependencies.

Upgrade Ruby and remove Debian package
--------------------------------------

First thing to do is to stop the GitLab service:

.. code:: bash

    service gitlab stop

Now as GitLab requires a newer version of Ruby, we'll remove the Debian
package. Strictly speaking that isn't required, but it's easier to avoid
confusion and potential issues later.

.. code:: bash

    apt purge ruby
    apt autoremove
    # remove directory not removed by purge
    rm -r /var/lib/gems/2.3.0 

Now install the latest stable Ruby from source:

.. code:: bash

    mkdir /tmp/ruby && cd /tmp/ruby
    curl --remote-name --progress \
        https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.3.tar.gz
    echo 'f919a9fbcdb7abecd887157b49833663c5c15fda  ruby-2.5.3.tar.gz' \
        | shasum -c - && tar xzf ruby-2.5.3.tar.gz
    cd ruby-2.5.3
    ./configure --disable-install-rdoc
    make
    make install

Then install bundler:

.. code:: bash

    gem install bundler --no-ri --no-rdoc

Finally clean up the temp directory:

.. code:: bash

    cd ~
    rm -r /tmp/ruby/

Upgrade other dependecies if required
-------------------------------------

In our case, all other dependencies should be good, so we don't need to
do anything further here. For newer versions of GitLab, it may be
required to install additional dependencies. The relevant GitLab docs
should document what is required there.

Upgrade GitLab 11.1 to 11.5
===========================

Note re lack of sudo in these instructions
------------------------------------------

To reduce the amount of typing, rather than using sudo for each line,
I've used a single su command at the start (below). You can follow my lead
there if you wish. Alternatively, you can skip the su line and preceed each
line with "sudo -u git" instead if you would rather.

.. code:: bash

    su - git
    cd /home/git/gitlab

The following instructions assume that you have run the above first.

Adjust repo
-----------

At build time, the TurnKey GitLab appliance uses the "--single-branch" switch
to minimise the amount of code that we pull during the install (thus
reducing the size of the ISO). However, to be able to checkout other
branches, that needs to be adjusted before proceeding:

.. code:: bash

    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

The v15.0/v15.1 applainces also use GitHub for the origin of the source
code. It is better to pull from GitLab now as the GitHub code isn't
always up to date and complete with all branches. To update the remote
repository to pull code from:

.. code:: bash

    git remote set-url origin https://gitlab.com/gitlab-org/gitlab-ce.git

Then we can pretty much just follow the docs.


Get latest code
---------------

.. code:: bash

    git fetch --all --prune
    git checkout -- db/schema.rb
    git checkout -- locale
    git checkout 11-5-stable

I got the below error when trying to check out the relevant branch::

    error: Your local changes to the following files would be overwritten by
    checkout:
        app/views/layouts/application.HTML.haml
    Please commit your changes or stash them before you switch branches.
    Aborting

I simply stashed the changes:

.. code:: bash

    git stash

And reran the checkout.


Update gitlab-shell
-------------------

.. code:: bash

    cd /home/git/gitlab-shell
    git fetch --all --tags --prune
    git checkout v$(</home/git/gitlab/GITLAB_SHELL_VERSION)
    bin/compile

Update gitlab-workhorse
-----------------------

.. code:: bash

    cd /home/git/gitlab-workhorse
    git fetch --all --tags --prune
    git checkout v$(</home/git/gitlab/GITLAB_WORKHORSE_VERSION)
    make

Update Gitaly
-------------

.. code:: bash

    cat >> /home/git/gitaly/config.toml <<EOF
    [gitaly-ruby]
    dir = "/home/git/gitaly/ruby"
    
    [gitlab-shell]
    dir = "/home/git/gitlab-shell"
    EOF
    cd /home/git/gitaly
    git fetch --all --tags --prune
    git checkout v$(</home/git/gitlab/GITALY_SERVER_VERSION)
    make

There is also note in the docs to check for a typo in the Gitaly config
(/home/git/gitaly/config.toml) - where the '[[storage]]' block(s) are
misspelled as '[[storages]]' (note the undesired plural). Mine was ok,
but please double check yours and fix if neccessary. 

GitLab pages
------------

By default, TurnKey GitLab doesn't have GitLab pages
installed/configured. If you wish to use that, then it will need to be
installed first. Once installed, then the GitLab docs on upgrading
should be followed.

Update MySQL permissions
------------------------

This step requires us to access MySQL tables. The easiest way to go is
to use the "adminer" user account (and password). Alternatively, you
could exit out of the su session first (don't forget to su back in).

If you use MySQL with replication and/or have enabled MySQL binary logfiles,
then please ensure that you add "log_bin_trust_function_creators=1" to
your MySQL config (and restart MySQL). You will need to do that as root.

Note this differs a little from upstream docs as we use a MySQL user
account called "gitlab" (rather than simply "git") and our DB is called
'gitlab_production' (rather than 'gitlabhq_production').

.. code:: bash

    mysql -u adminer -p -e "GRANT TRIGGER ON \`gitlab_production\`.* TO 'gitlab'@'localhost';"

Update configuration files
--------------------------

There have been some quite significant changes to Unicorn config
(/home/git/gitlab/config/unicorn.rb) so compare the default example config
against the updated example (and/or your actual config) and adjust as
neccessary. To view the differences between the default v11.1 config and
your current config like this:

.. code:: bash

    cd /home/git/gitlab
    git diff origin/11-1-stable:config/unicorn.rb.example config/unicorn.rb

Then to view the changes between the old default and the new default (to
see what has changed):

.. code:: bash

    cd /home/git/gitlab
    git diff origin/11-1-stable:config/unicorn.rb.example origin/11-5-stable:config/unicorn.rb.example

Check for changes in gitlab.yml.example in a simialr way. Again, manually
apply any that are relevant to your current gitlab.yml:

.. code:: bash

    cd /home/git/gitlab
    git diff origin/11-1-stable:config/gitlab.yml.example origin/11-5-stable:config/gitlab.yml.example

There are no Nginx config changes between v11.1 & v11.5 so you can skip
that step. For completeness though, you can view the changes like this:

.. code:: bash

    cd /home/git/gitlab
    git diff origin/11-1-stable:lib/support/nginx/gitlab origin/11-5-stable:lib/support/nginx/gitlab


If you have configured GitLab to use an SMTP relay directly, then please
see the GitLab upgrade docs on adjustments that you'll need to make
there. This doesn't apply if you have used confconsole to configure an
SMTP relay.

There are no "default" or initscript changes between v11.1 & v11.5 so
you can skip that step too.

Install libs, migrations, etc.
------------------------------

.. code:: bash

    bundle install --without postgres development test --deployment
    bundle clean
    bundle exec rake db:migrate RAILS_ENV=production
    bundle exec rake gettext:compile RAILS_ENV=production
    bundle exec rake yarn:install gitlab:assets:clean gitlab:assets:compile RAILS_ENV=production NODE_ENV=production
    bundle exec rake cache:clear RAILS_ENV=production

Changes in MySQL
----------------

Please note that this only applies to v15.0/v15.1 GitLab appliances.
Different versions should not have these steps applied unless you really
know what you are doing. If unsure, check the `GitLab MySQL docs`_
and/or post in the TurnKey forums_.

This step requires root access, so exit out of the su session, run these
commands, then su back in to continue.

.. code:: bash

    exit # exit out of su session
    echo "  innodb_default_row_format = Dynamic" >> /etc/mysql/mariadb.conf.d/99-turnkey-mariadb-workaround.cnf
    service mysql restart

    MYSQL="mysql -u root -B gitlab_production -e "
    $MYSQL "ALTER DATABASE gitlab_production CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;"
    $MYSQL "SET foreign_key_checks = 0;"
    TABLES=$($MYSQL "SHOW tables;" | grep -v Tables_in_gitlab_production)
    for table in $TABLES; do
        [[ $table == "keys" ]] && table="\`keys\`"
        $MYSQL "ALTER TABLE $table ROW_FORMAT=DYNAMIC;"
        $MYSQL "ALTER TABLE $table CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"
    done
    $MYSQL "SET foreign_key_checks = 1;"

We also need to make sure that the DB config file
(/home/git/gitlab/config/database.yml) has the following lines::

    encoding: utf8mb4
    collation: utf8mb4_general_ci

Mine already had the 'encoding:' line, I just had to update 'utf8' to 'utf8mb'.
The 'collation: utf8mb4_general_ci' line had to be added in (it didn't
exist at all). To check that all is well, use grep. 

.. code:: bash

    su - git
    cd gitlab
    grep encoding config/database.yml
    grep collation config/database.yml

I've reposted the commands, with expected output below:

.. code:: bash

    root@gitlab ~# su - git
    git@gitlab ~$ cd gitlab
    git@gitlab ~/gitlab$ grep encoding config/database.yml
      encoding: utf8mb4
    git@gitlab ~/gitlab$ grep collation config/database.yml
      collation: utf8mb4_general_ci

If your output matches mine, you should be good. To finalise the MySQL
adjustments, it is advisable to rerun the add_limits_mysql Rake
task:

.. code:: bash

    bundle exec rake add_limits_mysql RAILS_ENV=production


Restart services
----------------

Assuming everything looks ok, exit out of the su session and restart the
services:

.. code:: bash

    exit # out of su session
    service gitlab start
    service nginx restart


Final checks on GitLab
----------------------

Last time to su back in again and run some final checks:

.. code:: bash

    bundle exec rake gitlab:env:info RAILS_ENV=production
    bundle exec rake gitlab:check RAILS_ENV=production

Assuming the first one looks reasonable and the last one returns all
green checks, you're good to go.

Upgrade GitLab 11.2 to 11.3
===========================

This should be much more straight forward now...



.. _TurnKey GitLab appliance: https://www.turnkeylinux.org/gitlab
.. _GitLab: https://about.gitlab.com/
.. _forums: https://www.turnkeylinux.org/forum
.. _TurnKey GitLab appliance buildcode: https://github.com/turnkeylinux-apps/gitlab
.. _GitLab CE: https://gitlab.com/gitlab-org/gitlab-ce/
.. _update docs: https://gitlab.com/gitlab-org/gitlab-ce/tree/master/doc/update
.. _11.1 to 11.2: https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/11.1-to-11.2.md
.. _11.2 to 11.3: https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/11.2-to-11.3.md
.. _GitLab MySQL docs: https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/database_mysql.md
